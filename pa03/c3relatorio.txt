GDB código inicial:
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from ./a...
(gdb) break c3.c:9

(gdb) break c3.c:11

(gdb) run

[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".

Breakpoint 1, main (argc=1, argv=0x7fffffffde88) at c3.c:9
9	    a = malloc(sizeof(int) * 100);


(gdb) continue


Breakpoint 1, main (argc=1, argv=0x7fffffffde88) at c3.c:9
9	    a = malloc(sizeof(int) * 100);


(gdb) continue

(...)

Breakpoint 1, main (argc=1, argv=0x7fffffffde88) at c3.c:9
9	    a = malloc(sizeof(int) * 100);



Breakpoint 2, main (argc=1, argv=0x7fffffffde88) at c3.c:11
11	  free(a);


(gdb) continue

[Inferior 1 (process 13407) exited normally]

Valgrind do código inicial:

==13421== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==13421== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==13421== Command: ./a
==13421== 
==13421== 
==13421== HEAP SUMMARY:
==13421==     in use at exit: 3,600 bytes in 9 blocks
==13421==   total heap usage: 10 allocs, 1 frees, 4,000 bytes allocated
==13421== 
==13421== 3,600 bytes in 9 blocks are definitely lost in loss record 1 of 1
==13421==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==13421==    by 0x10918E: main (c3.c:9)
==13421== 
==13421== LEAK SUMMARY:
==13421==    definitely lost: 3,600 bytes in 9 blocks
==13421==    indirectly lost: 0 bytes in 0 blocks
==13421==      possibly lost: 0 bytes in 0 blocks
==13421==    still reachable: 0 bytes in 0 blocks
==13421==         suppressed: 0 bytes in 0 blocks
==13421== 
==13421== For lists of detected and suppressed errors, rerun with: -s
==13421== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)



O problema do código consiste em desalocar a memória alocada após o loop for, assim apenas um dos espaços de memória alocado nele será desalocado ao final do código, gerando um vazamento de memória no programa. Uma solução é usar free(a) dentro do loop para liberar todos os espaços de memória alocados:


For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from ./a...
(gdb) run

[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
[Inferior 1 (process 23395) exited normally]



==23475== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==23475== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==23475== Command: ./a
==23475== 
==23475== 
==23475== HEAP SUMMARY:
==23475==     in use at exit: 0 bytes in 0 blocks
==23475==   total heap usage: 10 allocs, 10 frees, 4,000 bytes allocated
==23475== 
==23475== All heap blocks were freed -- no leaks are possible
==23475== 
==23475== For lists of detected and suppressed errors, rerun with: -s
==23475== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

