Nesse caso, a execução do programa no GDB e no valgrind falha, uma vez que um erro do programa é a realização de um loop infinito. Além disso, ocorre um grande vazamento de memória no programa, uma vez que são alocados, a cada iteração, 128 bytes de memória no endereço do ponteiro inicializado, mas que não são liberados dentro do loop, que será executado indefinidamente, assim, memória será alocada até se esgotar, causando um grande vazamento. Uma das soluções possíveis para limitar o loop é estabelecer um tamanho do arranjo p e executar o loop na quantidade desse tamanho, por exemplo, 10. Depois, inicializar outro loop que irá iterar a mesma quantidade de vezes, dessa vez desalocando cada espaço de memória alocada no arranjo no loop anterior: 

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from ./a...
(gdb) run

[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
93824992252576
93824992253760
93824992253904
93824992254048
93824992254192
93824992254336
93824992254480
93824992254624
93824992254768
93824992254912
[Inferior 1 (process 17011) exited normally]



==17019== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==17019== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==17019== Command: ./a
==17019== 
78241856
78243136
78243328
78243520
78243712
78243904
78244096
78244288
78244480
78244672
==17019== 
==17019== HEAP SUMMARY:
==17019==     in use at exit: 0 bytes in 0 blocks
==17019==   total heap usage: 11 allocs, 11 frees, 2,304 bytes allocated
==17019== 
==17019== All heap blocks were freed -- no leaks are possible
==17019== 
==17019== For lists of detected and suppressed errors, rerun with: -s
==17019== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

