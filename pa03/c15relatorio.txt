GDB inicial:
(gdb) breakpoint c15.c:11
command indefinido: "breakpoint". Tente "help".
(gdb) break c15.c:11
Ponto de parada 1 at 0x55555555515f: file c15.c, line 11.
(gdb) break c15.c:14
Ponto de parada 2 at 0x555555555176: file c15.c, line 14.
(gdb) run
Starting program: /home/giovana/ed/pa03/c15/a 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".

Breakpoint 1, main (argc=1, argv=0x7fffffffde88) at c15.c:11
11	     a = inc(a);
(gdb) print a
$1 = 1
(gdb) print inc(a)
$2 = 2
(gdb) continue
Continuing.

Breakpoint 1, main (argc=1, argv=0x7fffffffde88) at c15.c:11
11	     a = inc(a);
(gdb) print a
$3 = 1
(gdb) print inc(a)
$4 = 2
(gdb) continue
Continuing.

Breakpoint 1, main (argc=1, argv=0x7fffffffde88) at c15.c:11
11	     a = inc(a);
(gdb) print a
$5 = 1
(gdb) continue
Continuing.

Breakpoint 1, main (argc=1, argv=0x7fffffffde88) at c15.c:11
11	     a = inc(a);
(gdb) print a
$6 = 1
(gdb) continue
Continuing.

Breakpoint 2, main (argc=1, argv=0x7fffffffde88) at c15.c:14
14	  return argc;
(gdb) print argc
$7 = 1
(gdb) continue
Continuing.
[Inferior 1 (process 20374) exited with code 01]
(gdb) quit

Valgrind inicial:
==20455== Memcheck, a memory error detector
==20455== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==20455== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==20455== Command: ./a
==20455== 
==20455== 
==20455== HEAP SUMMARY:
==20455==     in use at exit: 0 bytes in 0 blocks
==20455==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==20455== 
==20455== All heap blocks were freed -- no leaks are possible
==20455== 
==20455== For lists of detected and suppressed errors, rerun with: -s
==20455== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)


O programa não apresenta falhas de memória, porém, ao realizar uma análise de seu comportamento no GDB, verifica-se que ele não executa como desejado. Assim, após a atribuição da função inc em a, seu valor é alterado de 1 para 2, demonstrando que a função funcionou corretamente. Porém, na iteração seguinte, o valor de a retornou a ser um, já que o valor da variável foi declarado dentro, e não  fora do loop, e antes da atribuição do resultado da função como valor de a. Assim, "a" reptirá o comportamento de mudança de valor de 1 para 2 em todas as iterações do loop. Além disso, como retorno, o programa passa "argc", e considerando a estrutura dele, o resultado será 1, pois apenas um argumento(nome do programa) foi passado na linha de comando. Esses erros de lógica podem ser corrigidos inicializando a variável fora do loop, por exempo, e além disso o valor de a pode ser passado como um parâmetro da linha de comando:

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from ./a...
(gdb) run
Starting program: /home/giovana/ed/pa03/c15/a 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
3
[Inferior 1 (process 20658) exited with code 01]


==20681== Memcheck, a memory error detector
==20681== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==20681== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==20681== Command: ./a
==20681== 
3
==20681== 
==20681== HEAP SUMMARY:
==20681==     in use at exit: 0 bytes in 0 blocks
==20681==   total heap usage: 1 allocs, 1 frees, 1,024 bytes allocated
==20681== 
==20681== All heap blocks were freed -- no leaks are possible
==20681== 
==20681== For lists of detected and suppressed errors, rerun with: -s
==20681== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)


