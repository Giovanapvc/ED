GDB inicial:
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from ./a...
(gdb) break c9.c:6
Ponto de parada 1 at 0x1163: file c9.c, line 6.
(gdb) run

[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".

Breakpoint 1, f () at c9.c:6
6	x[10] = 0; 
(gdb) print x[10]
$1 = 134465
(gdb) continue
Continuing.
[Inferior 1 (process 15562) exited normally]

Valgrind inicial:
==15568== Memcheck, a memory error detector
==15568== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==15568== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==15568== Command: ./a
==15568== 
==15568== Invalid write of size 4
==15568==    at 0x10916B: f (c9.c:6)
==15568==    by 0x109180: main (c9.c:11)
==15568==  Address 0x4a9e068 is 0 bytes after a block of size 40 alloc'd
==15568==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==15568==    by 0x10915E: f (c9.c:5)
==15568==    by 0x109180: main (c9.c:11)
==15568== 
==15568== 
==15568== HEAP SUMMARY:
==15568==     in use at exit: 40 bytes in 1 blocks
==15568==   total heap usage: 1 allocs, 0 frees, 40 bytes allocated
==15568== 
==15568== 40 bytes in 1 blocks are definitely lost in loss record 1 of 1
==15568==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==15568==    by 0x10915E: f (c9.c:5)
==15568==    by 0x109180: main (c9.c:11)
==15568== 
==15568== LEAK SUMMARY:
==15568==    definitely lost: 40 bytes in 1 blocks
==15568==    indirectly lost: 0 bytes in 0 blocks
==15568==      possibly lost: 0 bytes in 0 blocks
==15568==    still reachable: 0 bytes in 0 blocks
==15568==         suppressed: 0 bytes in 0 blocks
==15568== 
==15568== For lists of detected and suppressed errors, rerun with: -s
==15568== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)


Apesar do programa executar normalmente pelo GDB, ao colocar um breakpoint na linha 6(x[10] = 0;) é possível identificar o erro do programa: o arranjo foi alocado dinamicamente com 10 posições, porém na linha 6 há uma tentativa de acessar a posição 11 do arranjo para atribuir um valor à ele. Assim, ao checar o valor atribuído nesse comando através do breakpoint do GDB, verifica-se que foi alocado um valor "lixo" para essa psição de memória. No Valgrind, isso se confirma com a mensagem "invalid write of 4", ou seja, houve tentativa de atribuir um inteiro a uma posição de memória não alocada. Outro erro detectado pelo Valgrind é que não houve liberação dessa memória alocada, ocorrendo um vazamento. Esses erros podem ser consertados pedindo que seja acessada a última real posição alocada do arranjo (9), e realizando um free(x) ao final da execução da função: 

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from ./a...
(gdb) run

[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
[Inferior 1 (process 16076) exited normally]


==16081== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==16081== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==16081== Command: ./a
==16081== 
==16081== 
==16081== HEAP SUMMARY:
==16081==     in use at exit: 0 bytes in 0 blocks
==16081==   total heap usage: 1 allocs, 1 frees, 40 bytes allocated
==16081== 
==16081== All heap blocks were freed -- no leaks are possible
==16081== 
==16081== For lists of detected and suppressed errors, rerun with: -s
==16081== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)


