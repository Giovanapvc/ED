GDB inicial:
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
enter a number:
2

Breakpoint 1, printSum () at c19.c:22
22	    sprintf(buf,"sum=%d",sum_to_n(atoi(line)));
(gdb) print buf
$1 = 0x0
(gdb) continue
Continuing.

Program received signal SIGSEGV, Segmentation fault.
0x00007ffff7c8f757 in __GI__IO_str_overflow (fp=0x7fffffffdb20, c=115) at ./libio/strops.c:133
133	./libio/strops.c: Arquivo ou diretório inexistente.



Valgrind inicial:
==23025== Invalid write of size 1
==23025==    at 0x4902757: _IO_str_overflow (strops.c:133)
==23025==    by 0x4900EB3: _IO_default_xsputn (genops.c:399)
==23025==    by 0x4900EB3: _IO_default_xsputn (genops.c:370)
==23025==    by 0x48E81CC: outstring_func (vfprintf-internal.c:239)
==23025==    by 0x48E81CC: __vfprintf_internal (vfprintf-internal.c:1263)
==23025==    by 0x48F4A08: __vsprintf_internal (iovsprintf.c:95)
==23025==    by 0x48D39A7: sprintf (sprintf.c:30)
==23025==    by 0x1092A5: printSum (c19.c:22)
==23025==    by 0x1092DD: main (c19.c:28)
==23025==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==23025== 
==23025== 
==23025== Process terminating with default action of signal 11 (SIGSEGV)
==23025==  Access not within mapped region at address 0x0
==23025==    at 0x4902757: _IO_str_overflow (strops.c:133)
==23025==    by 0x4900EB3: _IO_default_xsputn (genops.c:399)
==23025==    by 0x4900EB3: _IO_default_xsputn (genops.c:370)
==23025==    by 0x48E81CC: outstring_func (vfprintf-internal.c:239)
==23025==    by 0x48E81CC: __vfprintf_internal (vfprintf-internal.c:1263)
==23025==    by 0x48F4A08: __vsprintf_internal (iovsprintf.c:95)
==23025==    by 0x48D39A7: sprintf (sprintf.c:30)
==23025==    by 0x1092A5: printSum (c19.c:22)
==23025==    by 0x1092DD: main (c19.c:28)
==23025==  If you believe this happened as a result of a stack
==23025==  overflow in your program's main thread (unlikely but
==23025==  possible), you can try to increase the size of the
==23025==  main thread stack using the --main-stacksize= flag.
==23025==  The main thread stack size used in this run was 8388608.
==23025== 
==23025== HEAP SUMMARY:
==23025==     in use at exit: 2,048 bytes in 2 blocks
==23025==   total heap usage: 2 allocs, 0 frees, 2,048 bytes allocated
==23025== 
==23025== LEAK SUMMARY:
==23025==    definitely lost: 0 bytes in 0 blocks
==23025==    indirectly lost: 0 bytes in 0 blocks
==23025==      possibly lost: 0 bytes in 0 blocks
==23025==    still reachable: 2,048 bytes in 2 blocks
==23025==         suppressed: 0 bytes in 0 blocks
==23025== Reachable blocks (those to which a pointer was found) are not shown.
==23025== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==23025== 
==23025== For lists of detected and suppressed errors, rerun with: -s
==23025== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Falha de segmentação (imagem do núcleo gravada)

A complementação do GDB com o Valgrind mostra que a falha de segmentação de memória gerada pelo programa advém da variável buf, uma vez que, ao colocar um breakpoint para saber seu endereço, GDB retorna 0x0, e a mensagem de erro do Valgrind "Access not within mapped region at address 0x0" se refere ao mesmo endereço.O problema ocorre pois a variável buf não foi alocada dinamicamente antes de ser utilizada na funçaõ sprintf, que tenta escrever na posição de memória(que não existe) da variável, gerando uma falha de segmentação. A solução é alocar dinamicamente a variável, com algum número de bytes (no código corrigido foram utilizados 30 bytes) antes de usá-la na função sprintf: 


For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from ./a...
(gdb) run

[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
enter a number:
3
sum=6
[Inferior 1 (process 23118) exited normally]



==23131== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==23131== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==23131== Command: ./a
==23131== 
enter a number:
3
sum=6
==23131== 
==23131== HEAP SUMMARY:
==23131==     in use at exit: 0 bytes in 0 blocks
==23131==   total heap usage: 3 allocs, 3 frees, 2,078 bytes allocated
==23131== 
==23131== All heap blocks were freed -- no leaks are possible
==23131== 
==23131== For lists of detected and suppressed errors, rerun with: -s
==23131== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

