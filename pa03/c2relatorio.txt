GDB inicial: 
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from ./a...
(gdb) break 11

(gdb) run

[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".


Breakpoint 1, main (argc=1, argv=0x7fffffffde88) at c2.c
:11
11	    printf("%d ", a[i]);


(gdb) continue


Breakpoint 1, main (argc=1, argv=0x7fffffffde88) at c2.c
:11
11	    printf("%d ", a[i]);


(gdb) continue

(..)

Breakpoint 1, main (argc=1, argv=0x7fffffffde88) at c2.c
:11
11	    printf("%d ", a[i]);


(gdb) continue

0 1 2 3 4 5 6 7 8 0 
[Inferior 1 (process 12049) exited normally]


valgrind inicial:
==12117== Memcheck, a memory error detector
==12117== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==12117== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==12117== Command: ./a
==12117== 
==12117== Conditional jump or move depends on uninitialised value(s)
==12117==    at 0x48E9B56: __vfprintf_internal (vfprintf-internal.c:1516)
==12117==    by 0x48D381E: printf (printf.c:33)
==12117==    by 0x1091F1: main (c2.c:11)
==12117== 
==12117== Use of uninitialised value of size 8
==12117==    at 0x48CD33B: _itoa_word (_itoa.c:177)
==12117==    by 0x48E8B3D: __vfprintf_internal (vfprintf-internal.c:1516)
==12117==    by 0x48D381E: printf (printf.c:33)
==12117==    by 0x1091F1: main (c2.c:11)
==12117== 
==12117== Conditional jump or move depends on uninitialised value(s)
==12117==    at 0x48CD34C: _itoa_word (_itoa.c:177)
==12117==    by 0x48E8B3D: __vfprintf_internal (vfprintf-internal.c:1516)
==12117==    by 0x48D381E: printf (printf.c:33)
==12117==    by 0x1091F1: main (c2.c:11)
==12117== 
==12117== Conditional jump or move depends on uninitialised value(s)
==12117==    at 0x48E9643: __vfprintf_internal (vfprintf-internal.c:1516)
==12117==    by 0x48D381E: printf (printf.c:33)
==12117==    by 0x1091F1: main (c2.c:11)
==12117== 
==12117== Conditional jump or move depends on uninitialised value(s)
==12117==    at 0x48E8C85: __vfprintf_internal (vfprintf-internal.c:1516)
==12117==    by 0x48D381E: printf (printf.c:33)
==12117==    by 0x1091F1: main (c2.c:11)
==12117== 
0 1 2 3 4 5 6 7 8 0 
==12117== 
==12117== HEAP SUMMARY:
==12117==     in use at exit: 0 bytes in 0 blocks
==12117==   total heap usage: 1 allocs, 1 frees, 1,024 bytes allocated
==12117== 
==12117== All heap blocks were freed -- no leaks are possible
==12117== 
==12117== Use --track-origins=yes to see where uninitialised values come from
==12117== For lists of detected and suppressed errors, rerun with: -s
==12117== ERROR SUMMARY: 5 errors from 5 contexts (suppressed: 0 from 0)


Depurando o programa com o GDB, o programa foi executado normalmente, porém o output não foi como desejado (após printar 8 foi printado um 0 como saida). Assim, colocando um breakpoint na linha 11, dentro do for que printa as variaveis alocadas no array, verificou-se que a ultima iteração do loop realizou o print de um numero 0 como espécie de "lixo". Ao depurar com o valgrind, 5 erros foram detectados, advindo da construção do mesmo loop.Os erros indicam que o programa estava tentando executar uma variavel que não foi inicializada com um valor, além de indicar o uso de uma variavel de 8 bytes (nesse caso, um ponteiro) que não foi inicializada. Assim entende-se que, como no segundo for a variavel i é iterada uma vez a mais do que o primeiro, um espaço de memoria dentro do array a é inicializado "a mais", e assim não há valor a ser chamado na saída do programa em dado espaço do array. A solução seria realizar ambos loops com o mesmo numero de iterações(9).

script pós correção:

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from ./a...
(gdb) run

[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
0 1 2 3 4 5 6 7 8 
[Inferior 1 (process 12665) exited normally]



==12669== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==12669== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==12669== Command: ./a
==12669== 
0 1 2 3 4 5 6 7 8 
==12669== 
==12669== HEAP SUMMARY:
==12669==     in use at exit: 0 bytes in 0 blocks
==12669==   total heap usage: 1 allocs, 1 frees, 1,024 bytes allocated
==12669== 
==12669== All heap blocks were freed -- no leaks are possible
==12669== 
==12669== For lists of detected and suppressed errors, rerun with: -s
==12669== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

